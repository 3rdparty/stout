syntax = "proto3";

package test;

import "include/stout/flags/v1/flag.proto";
import "include/stout/flags/v1/positional_argument.proto";
import "include/stout/flags/v1/subcommand.proto";

///////////////////////////////////////////////////////////////////////////////

message Rename {
  string cur_file_name = 1 [
    (stout.v1.argument) = {
      name: "current_file"
      help: "help"
    }
  ];

  string new_file_name = 2 [
    (stout.v1.argument) = {
      name: "new_file"
      help: "help"
    }
  ];
}

///////////////////////////////////////////////////////////////////////////////

message BuildFile {
  bool debug_mode = 1 [
    (stout.v1.flag) = {
      names: [ "debug" ]
      help: "help"
    }
  ];

  string file = 2 [
    (stout.v1.argument) = {
      name: "file_name"
      help: "help"
    }
  ];
}

///////////////////////////////////////////////////////////////////////////////

message ProcessFile {
  oneof subcommand {
    BuildFile build = 1 [
      (stout.v1.subcommand) = {
        names: [ "build" ]
        help: "help"
      }
    ];

    Rename rename = 2 [
      (stout.v1.subcommand) = {
        names: [ "rename" ]
        help: "help"
      }
    ];
  }
}

///////////////////////////////////////////////////////////////////////////////

// This message is illegal because we expect that users
// will define fields with 'stout.v1.argument' extension
// of the type 'string'.
message IllegalPositionalArg1 {
  int32 num = 1 [
    (stout.v1.argument) = {
      name: "num"
      help: "help"
    }
  ];
}

///////////////////////////////////////////////////////////////////////////////

// Illegal setup where the user doesn't define name option.
message IllegalPositionalArg2 {
  string str = 1 [
    (stout.v1.argument) = {
      help: "help"
    }
  ];
}

///////////////////////////////////////////////////////////////////////////////

// Illegal setup where the user doesn't define help option.
message IllegalPositionalArg3 {
  string str = 1 [
    (stout.v1.argument) = {
      name: "str"
    }
  ];
}

///////////////////////////////////////////////////////////////////////////////

// This message demonstrates that if users define positional
// arguments with random field index order - anyway the order
// of positional arguments that we expect from the command
// line will be the same as the order in which they are
// defined in protobuf message.
message RandomOrderFieldIndexes {
  string str1 = 2 [
    (stout.v1.argument) = {
      name: "str1"
      help: "help"
    }
  ];

  string str2 = 3 [
    (stout.v1.argument) = {
      name: "str2"
      help: "help"
    }
  ];

  string str3 = 1 [
    (stout.v1.argument) = {
      name: "str3"
      help: "help"
    }
  ];
}

///////////////////////////////////////////////////////////////////////////////

// More complicated case for positional arguments.
message TopLevelArguments {
  int32 top_level_flag1 = 1 [
    (stout.v1.flag) = {
      names: [ "top_level_flag1" ]
      help: "help"
    }
  ];

  string top_level_flag2 = 2 [
    (stout.v1.flag) = {
      names: [ "top_level_flag2" ]
      help: "help"
    }
  ];

  string top_pos_arg1 = 3 [
    (stout.v1.argument) = {
      name: "top_pos_arg1"
      help: "help"
    }
  ];

  string top_pos_arg2 = 4 [
    (stout.v1.argument) = {
      name: "top_pos_arg2"
      help: "help"
    }
  ];

  oneof subcommand {
    Subcommand1 sub1 = 5 [
      (stout.v1.subcommand) = {
        names: [ "sub1" ]
        help: "help"
      }
    ];
    Subcommand2 sub2 = 6 [
      (stout.v1.subcommand) = {
        names: [ "sub2" ]
        help: "help"
      }
    ];
  }
}

///////////////////////////////////////////////////////////////////////////////

message Subcommand1 {
  int32 sub1_flag = 1 [
    (stout.v1.flag) = {
      names: [ "sub1_flag" ]
      help: "help"
    }
  ];

  string sub1_pos_arg = 2 [
    (stout.v1.argument) = {
      name: "sub1_pos_arg1"
      help: "help"
    }
  ];
}

///////////////////////////////////////////////////////////////////////////////

message Subcommand2 {
  int32 sub2_flag = 1 [
    (stout.v1.flag) = {
      names: [ "sub2_flag" ]
      help: "help"
    }
  ];

  string sub2_pos_arg = 2 [
    (stout.v1.argument) = {
      name: "sub2_pos_arg"
      help: "help"
    }
  ];
}

///////////////////////////////////////////////////////////////////////////////
